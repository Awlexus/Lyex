definitions - only one (merge any imports) name it "definition"

	target_namespace
	documentation
	schemas
		element[]
			name
			ns?
			documentation (nested in annotation)
			type :: string | complex_type
		complex_type[]
			name
			element[]
				name
				ns?
				type :: string | complex_type

		simple_type[]
			name
			documentation (nested in annotation)
			restrictions :: string[]
	port_type[]
		name
		operations[]
			name
			documentation
			input
				message
			output
				message
	binding[]
		name		
		port_type (port_type name)
		style
		operation[]
			name
			action
			input
				header?
				body
			output
				header?
				body
	service
		port[]
			name
			binding
			location



1. Parse XML into Structs
2. Compile bindings into operations.
	Find all messages via the port_type operations
2. Compile the service into ports
	ports reference a binding
	binding


read file and cache locally
use SAX parser to walk the XML tree
when we hit an external import, start from 1 and merge with current state
start with: 
	%{
		target_namespace: "",
		documentation: "",
		schemas: %{},
		port_types: %{},
		bindings: %{},
		service: %{}
	}

	use stack based parsing

Document that shit


imports
---------
	enter schema
		push an empty schema to stack
		parse schema nodes normally
		enter import
			parse file
			push imported WSDL AST to stack
		exit import
			pull out imported WSDL schemas and push them onto the stack
	exit schema
		collect all schemas until we reach the WSDL AST
		when we get to the WSDL AST, merge the schemas into its schemas collection


Generation
------------
for each port_type
	for each operation
		read input type
		find input type in messages
		read message part.element
		find element in schemas
		read element type.
			if complex_type, generate struct and walk the elements

			